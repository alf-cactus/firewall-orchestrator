@inject UserConfig userConfig

@typeparam ElementType

@if (Elements.Count() <= AlwaysShowElements)
{
	@foreach(var elem in Elements)
	{
		@(ElementTemplate(elem))<br>
	}
}
else
{
	@foreach(var elem in Elements.Take(AlwaysShowElements - 1))
	{
		@(ElementTemplate(elem))<br>
	}
	<div>
		<details>
			<summary class="mb-1 text-truncate">
				@(ElementTemplate(Elements.Skip(AlwaysShowElements - 1).First()))
			</summary>
			@foreach (ElementType element in Elements.Skip(AlwaysShowElements))
			{
				@(ElementTemplate(element))<br>
			}
		</details>
	</div>
}

@code 
{
	[Parameter]
	public IEnumerable<ElementType> Elements { get; set; } = Enumerable.Empty<ElementType>();

	[Parameter]
	public RenderFragment<ElementType> ElementTemplate { get; set; } = element => __builder =>
	{
		@element
	};

	[Parameter]
	public int AlwaysShowElements { get; set; } = 1;
}
